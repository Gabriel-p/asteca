# -*- coding: utf-8 -*-
"""
Created on Fri Nov  1 17:58:28 2013

@author: gabriel
"""

import numpy as np
import random as rd
#from scipy.stats import ks_2samp
from scipy import stats

import rpy2.robjects as robjects
from rpy2.robjects.packages import importr
ks = importr('ks')
kde_test = ks.kde_test
hpi_kfe = ks.Hpi_kfe

'''
Compare the cluster region KDE with all the field region KDEs using Duong's
ks package (developed in R) to obtain a p-value. This value will be close
to 1 if the cluster region is very similar to the field regions and
closer to 0 as it differentiates from it.
As a rule of thumb, a p-value > 0.05 (ie: 5%) indicates that the overdensity
is most likely not a real cluster.
'''


def gauss_error(col_lst, e_col_lst, mag_lst, e_mag_lst):
    # Randomly move mag and color through a Gaussian function.
    col_gauss = rd.gauss(np.array(col_lst), np.array(e_col_lst))
    mag_gauss = rd.gauss(np.array(mag_lst), np.array(e_mag_lst))
    
    return col_gauss, mag_gauss



def get_CMD(region):
    
    # Obtain CMD for given region.
    # Format field region data.
    col_lst, e_col_lst, mag_lst, e_mag_lst = [], [], [], []
    for star in region:
        # Color data.
        col_lst.append(star[5])
        # Color error.
        e_col_lst.append(star[6])
        # Magnitude data.
        mag_lst.append(star[3])
        # Magnitude error.
        e_mag_lst.append(star[4])
        
    # Move magnitude and colors randomly according to their errors,
    # using a Gaussian function.
    col_gauss, mag_gauss = gauss_error(col_lst, e_col_lst, mag_lst,
                                       e_mag_lst)

    matrix_0 = [col_gauss, mag_gauss]
    # Format values so the list will be composed of [star1, star2, ...] where
    # star1 = [color, magnitude]
    matrix_1 = map(list, zip(*matrix_0))
    # Put all stars into a single list.
    matrix = [star for axis in matrix_1 for star in axis]
    return matrix



def get_pval(flag_area_stronger, cluster_region, field_region,
                     col1_data, mag_data, center_cl, clust_rad):
    
    # Apply algorithm if enough field regions around the cluster region
    # were selected.
    if not(flag_area_stronger):
        
        print 'Obtaining p_value for cluster region vs field regions.'
        
        # Set number of runs for the p_value algorithm with a maximum of
        # 100 if only one field region was used.
        runs = int(100/len(field_region))
        runs = 1
        
        # Only use stars inside cluster's radius.
        cluster_region_r = []
        for star in cluster_region:
            dist = np.sqrt((center_cl[0]-star[1])**2 + \
            (center_cl[1]-star[2])**2)
            if dist <= clust_rad[0]: 
                cluster_region_r.append(star)
                
        # The first list holds all the p_values obtained comparing the cluster
        # region with the field regions, the second one holds p_values for field
        # vs field comparisions.
        p_vals_cl, p_vals_f = [], []
        # Iterate a given number of times.
        for run_num in range(runs):
            # Loop through all the field regions.
            for indx, f_region in enumerate(field_region):
                
                # CMD for cluster region.
                matrix_cl = get_CMD(cluster_region_r)
                rows_cl = int(len(matrix_cl)/2)
                # CMD for 1st field region.
                matrix_f1 = get_CMD(f_region)
                rows_f1 = int(len(matrix_f1)/2)
                
                # Create matrices for these CMDs.
                m_cl = robjects.r.matrix(robjects.FloatVector(matrix_cl),
                                       nrow=rows_cl, byrow=True)
                m_f1 = robjects.r.matrix(robjects.FloatVector(matrix_f1),
                                         nrow=rows_f1, byrow=True)
                                         
                # Bandwith matrices.
                hpic = hpi_kfe(x=m_cl, binned=True)
                hpif1 = hpi_kfe(x=m_f1, binned=True)
                
                # Call 'ks' function to obtain p_value.
                # Cluster vs field p_value.
                res_cl = kde_test(x1=m_cl, x2=m_f1, H1=hpic, H2=hpif1)
                p_val_cl = res_cl.rx2('pvalue')
                # Store cluster vs field p-value.
                p_vals_cl.append(float(str(p_val_cl)[4:]))

                # Compare the field region used above with all the remaining
                # field regions. This results in [N*(N+1)/2] combinations of
                # field vs field comparisions.
                for f_region2 in field_region[indx:]:
                
                    # CMD for 2nd field region.
                    matrix_f2 = get_CMD(f_region2)
                    rows_f2 = int(len(matrix_f2)/2)
                    # Matrix.
                    m_f2 = robjects.r.matrix(robjects.FloatVector(matrix_f2),
                                             nrow=rows_f2, byrow=True)
                    # Bandwith.
                    hpif2 = hpi_kfe(x=m_f2, binned=True)
            
                    # Field vs field p_value.
                    res_f = kde_test(x1=m_f1, x2=m_f2, H1=hpif1, H2=hpif2)
                    p_val_f = res_f.rx2('pvalue')
                    # Store field vs field p-value.
                    p_vals_f.append(float(str(p_val_f)[4:]))


            if run_num == runs/4:
                print '  25% done'
            elif run_num == runs/2:
                print '  50% done'
            elif run_num == (runs/2 + runs/4):
                print '  75% done'
            
#        p_vals_cl = [0.1756496, 0.2933331, 0.1687211, 0.2440339, 0.2990187, 0.3840504, 0.1353353, 0.3988721, 0.3952316, 0.3279754, 0.002673867, 0.03022005, 0.478585, 0.2709742, 0.437846, 0.2760698, 0.370349, 0.3175546, 0.2938654, 0.2032415, 0.345282, 0.2082478, 0.3206091, 0.03330266, 0.4140902, 0.2555249, 0.422574, 0.2784636, 0.2544273, 0.3320191, 0.1526333, 0.007993452, 0.4214837, 0.343382, 0.1243819, 0.3449244, 0.3044578, 0.3972818, 0.1408649, 0.3633753, 0.4135326, 0.06510525, 0.2002921, 0.3508102, 0.3087154, 0.1695035, 0.3263479, 0.3557986, 0.3078992, 0.08703433, 0.3926909, 0.3520475, 0.3456937, 0.3231313, 0.3985743, 0.2824762, 0.1382635, 0.06840089, 0.3791057, 0.1796332, 0.412418, 0.256413, 0.2900741, 0.1283067, 0.2954599, 0.363984, 0.5425542, 0.2455223, 0.1665169, 0.02579223, 0.407659, 0.1664534, 0.4372714, 0.005419115, 0.06976668, 0.3407375, 0.2781504, 0.2363873, 0.3990997, 0.4288022, 0.0002469436, 0.2486621, 0.263188, 0.467298, 0.396114, 0.3782381, 0.446344, 0.1486749, 0.1492214, 0.3460596, 0.4444826, 0.01134623, 0.377836, 0.08280797, 0.1561575, 0.3689337, 0.5242945, 0.4567622, 0.259972, 0.1604101, 0.2224829, 0.3356199, 0.1519752, 0.05311022, 0.4237947, 0.2286366, 0.5039598, 0.422511, 0.01389535, 0.08993171, 0.4015337, 0.2239748, 0.07418398, 0.05168595, 0.0706, 0.1472113, 0.3253319, 0.2182484, 0.1226851, 0.3089086, 0.007278576, 0.1507018, 0.329427, 0.1991769, 0.08457048, 3.077676e-08, 0.1765738, 0.2601248, 0.0009371886, 0.0002185328, 0.1645581, 0.2834558, 0.2483111, 0.2968277, 0.3360947, 0.2160198, 0.4206928, 0.08509106, 0.318679, 0.4239482, 0.02654102, 0.3137166, 0.2923938, 0.01496587, 0.4376601, 0.006414485, 0.4065693, 0.3403535, 0.1430382, 0.0326759, 0.1351539, 0.05125895, 0.1031547, 0.1169529, 0.3358285, 0.06850538, 0.2667283, 0.4543756, 0.2795356, 0.4550652, 0.2962917, 0.1605147, 0.2035501, 0.3066539, 0.253585, 0.1398436, 0.4962383, 0.3396143, 0.4064041, 0.3807047, 0.4392993, 0.01823833, 0.4292044, 0.2036831, 0.004841921, 0.3124075, 0.4276328, 0.3771457, 0.1164202, 0.0008838186, 0.001557931, 0.3548175, 0.1642726, 0.2510445, 0.0002282703, 0.1185083, 0.5185422, 0.3665289, 0.01856648, 0.4236062, 0.2608822, 0.226793, 0.1170749, 0.04018078, 0.3902481, 0.2969462, 0.4681458, 0.352543, 0.2318051, 0.3118987]         
#        p_vals_f =  [0.7050273, 0.277676, 0.2396661, 0.4695578, 0.3881496, 0.3959289, 0.4862042, 0.5097233, 0.4479434, 0.4694844, 0.4016415, 0.1340718, 0.4930698, 0.4734501, 0.1577632, 0.3926793, 0.5155934, 0.2998272, 0.293814, 0.4480189, 0.7206097, 0.4497418, 0.5042885, 0.1475802, 0.4510396, 0.4118634, 0.424375, 0.3295902, 0.2749253, 0.106561, 0.4393784, 0.4917627, 0.5986938, 0.2429199, 0.3385425, 0.39554, 0.2357264, 0.4356698, 0.4096107, 0.7014689, 0.5276516, 0.3123717, 0.07146208, 0.4838287, 0.245889, 0.2563554, 0.1936731, 0.3413046, 0.01959231, 0.4319996, 0.5054775, 0.4219778, 0.2351592, 0.1994608, 0.2111805, 0.238327, 0.265673, 0.2268559, 0.2249581, 0.2090444, 0.1613883, 0.1917023, 0.08665621, 0.3716251, 0.1698433, 0.05690362, 0.03998288, 6.204574e-06, 0.003941612, 0.05930612, 2.322133e-05, 0.1513546, 0.002420553, 0.001764396, 0.4309559, 0.1933756, 0.3659419, 0.285603, 0.05526518, 0.1215739, 0.4250715, 0.03288786, 0.3827133, 0.1262125, 0.4305121, 0.2768786, 0.05757421, 0.5610995, 0.4174052, 0.3166567, 0.08385263, 0.2824452, 0.3298087, 0.4911914, 0.3893066, 0.5184645, 0.3927132, 0.1568913, 0.2396695, 0.4003205, 0.3767317, 0.2498707, 0.2681817, 0.4986667, 0.3517045, 0.6790906, 0.5070804, 0.1241051, 0.5384287, 0.45034, 0.1501471, 0.5249743, 0.1183734, 0.3497806, 0.4335371, 0.262338, 0.3416309, 0.4188559, 0.3837453, 0.5417279, 0.1321493, 0.04960508, 0.5243588, 0.2783306, 0.1605196, 0.2826566, 0.01834305, 0.4390108, 0.4286619, 0.4440193, 0.02989526, 0.05183737, 0.7086057, 0.411796, 0.4132109, 0.5581001, 0.4142841, 0.5429633, 0.5309224, 0.4810144, 0.5770423, 0.4718985, 0.4477669, 0.3630911, 0.4852058, 0.2009802, 0.2277785, 0.3281888, 0.3605316, 0.5093645, 0.3323186, 0.2551182, 0.5134024, 0.3506959, 0.4526567, 0.1390161, 0.4396188, 0.350773, 0.001550496, 0.274896, 0.4273472, 0.4210792, 0.2093552, 0.06213463, 0.3149446, 0.6319379, 0.09503969, 0.2081035, 0.3387977, 0.2117766, 0.5007263, 0.2255298, 0.3340803, 0.3377183, 0.6862249, 0.1577677, 0.3943701, 0.4577314, 0.00365003, 0.2557671, 0.4694614, 0.2365763, 0.6968363, 0.3107681, 0.1621147, 0.3881104, 0.4919853, 0.1620241, 0.4217727, 0.677276, 0.4678085, 0.5551229, 0.4097055, 0.4532052, 0.4300943, 0.490858, 0.4095009, 0.5001485, 0.2306184, 0.5747096, 0.7391826, 0.5382033, 0.2465443, 0.2017776, 0.5757885, 0.1770223, 0.2589096, 0.6887556, 0.2119407, 0.6859018, 0.4560755, 0.5175065, 0.4680348, 0.4864997, 0.4280251, 0.535301, 0.4945107, 0.3349698, 0.520531, 0.5126834, 0.2849287, 0.465316, 0.2600441, 0.1114422, 0.1056076, 0.5511348, 0.5305946, 0.5501664, 0.152681, 0.2742792, 0.4185192, 0.4702949, 0.1285104, 0.2246721, 0.03770499, 0.3410538, 0.3637543, 0.05469526, 0.04103085, 0.1534832, 0.164566, 0.2436151, 0.2221363, 0.364967, 0.459516, 0.4542467, 0.1013678, 0.0834277, 0.3478012, 0.3097578, 0.4038929, 0.461249, 0.5351528, 0.1428912, 0.4040958, 0.5022918, 0.3752225, 0.4436388, 0.1699654, 0.3315485, 0.06680542, 0.5083134, 0.5569392, 0.2730131, 0.2031257, 0.3176894, 0.3366797, 0.314381, 0.2486028, 0.2911511, 0.5947565, 0.4117612, 0.4720891, 0.5546095, 0.2240665, 0.4712955, 0.5151389, 0.4479553, 0.4539426, 0.418902, 0.3161067, 0.4835333, 0.2822903, 0.2335244, 0.6244763, 0.4261278, 0.4551983, 0.419435, 0.03328446, 0.003402552, 0.02762518, 0.3677961, 0.5184409, 0.2240112, 0.1787668, 0.3239406, 0.5453557, 0.1142423, 0.3036987, 0.2543794, 0.1386519, 0.04130988, 0.440282, 0.4393368, 0.373589, 0.3319297, 0.5044648, 0.08511178, 0.2062024, 0.5457489, 0.2443756, 0.2154566, 0.3670318, 0.1033419, 0.4207411, 0.6987387, 0.5148034, 0.3499367, 0.5553604, 0.1159644, 0.1686946, 0.5085941, 0.1923348, 0.5116398, 0.3937237, 0.3268224, 0.5322153, 0.1988648, 0.511564, 0.5707766, 0.1396817, 0.2476363, 0.331337, 0.5317998, 0.5432899, 0.3798329, 0.3168417, 0.3544949, 0.366805, 0.3460632, 0.05956156, 0.1975723, 0.004152121, 0.2167275, 0.5268816, 0.2724363, 0.1444946, 0.4489935, 0.2081098, 0.1680034, 0.407015, 0.4572217, 0.4121924, 0.08923552, 0.5540446, 0.2519385, 0.08018126, 0.5289847, 0.3948939, 0.4800964, 0.3992015, 0.5260907, 0.3236409, 0.2184459, 0.2141181, 0.7277804, 0.3321674, 0.4509385, 0.4052156, 0.3271367, 0.09161724, 0.5727091, 0.3495528, 0.2296569, 0.2785136, 0.1236439, 0.2282717, 0.5230329, 0.2260165, 0.01253592, 0.3017153, 0.4713192, 0.2356817, 0.0003675226, 0.7342878, 0.01472452, 0.01785552, 0.3003733, 0.1042112, 0.03440979, 0.002956142, 0.4625996, 0.7178877, 0.2789905, 0.4042063, 0.08478172, 0.3898584, 0.4570169, 0.2773208, 0.6841321, 0.1274192, 0.4249148, 0.2742096, 0.1157081, 0.4160395, 0.4668847, 0.3685623, 0.4412588, 0.2100815, 0.4678048, 0.7356129, 0.3312213, 0.4025536, 0.5476906, 0.6662213, 0.09424688, 0.4492848, 0.4938349, 0.3861214, 0.8023293, 0.4911531, 0.4381538, 0.5097945, 0.5375386, 0.3563624, 0.3125868, 0.1607416, 0.3958284, 0.01246477, 0.2813098, 0.4211756, 0.4799698, 0.4881263, 0.1995565, 0.1060881, 0.4517416, 0.3393568, 0.5383688, 0.04098936, 0.5729606, 0.3697534, 0.4372875, 0.09563453, 0.1084564, 0.1356498, 0.1114013, 0.2265321, 0.1895813, 0.02388757, 0.3120905, 0.06603153, 0.3892898, 0.01027869, 0.3144266, 0.444241, 0.001564391, 0.2912121, 0.05768553, 0.2906153, 0.02256137, 0.1191965, 0.4376253, 0.02061703, 0.2581412, 0.3096677, 0.5541373, 0.1174724, 0.2623855, 0.1237327, 0.1494594, 0.001392868, 3.212951e-05, 0.2023769, 0.418373, 0.5334047, 0.322007, 0.2609198, 0.6251909, 0.1210066, 0.4183339, 0.3894034, 0.2848964, 0.4280938, 0.5066958, 0.2644175, 0.4630124, 0.6046108, 0.427839, 0.4220069, 0.4228533, 0.5946043, 0.2701634, 0.4995282, 0.4366777, 0.7595312, 0.195719, 0.3025369, 0.4210354, 0.4731775, 0.0956293, 0.3753684, 0.2614147, 0.0778429, 0.3874568, 0.3682105, 0.288314, 0.4718556, 0.0500832, 0.2967978, 0.1118557, 0.05205897, 0.5399234, 0.4703063, 0.4521074, 0.2875414, 0.5777263, 0.2818073, 0.006476754, 0.4031645, 0.5660792, 0.2274063, 0.5958065, 0.4846482, 0.2001878, 0.5323665, 0.7508048, 0.4853278, 0.4211356, 0.5204858, 0.09192182, 0.3978008, 0.515416, 0.1267195, 0.4879727, 0.4187866, 0.1678284, 0.5430299, 0.4637092, 0.4828352, 0.2336066, 0.08737486, 0.02076804, 0.05772697, 0.5498779, 0.3383891, 0.1295046, 0.2805342, 0.3667908, 0.06355683, 0.443009, 0.06018031, 0.2104327, 0.748453, 0.03647462, 0.3635546, 0.06240119, 0.1788133, 0.3737127, 0.3872504, 0.3767753, 0.3055601, 0.4291112, 0.4318734, 0.1926083, 0.6761954, 0.08480508, 0.4476415, 0.5032338, 0.2834293, 0.2808521, 0.5075073, 0.4021887, 0.5382855, 0.4401011, 0.002129811, 0.1990974, 0.09342024, 0.2689461, 0.1016134, 0.3798461, 0.1870435, 0.3192032, 0.3303148, 0.03225171, 0.3984225, 0.5352163, 0.1219155, 0.03892047, 0.2843148, 0.3926681, 0.5011169, 0.4512013, 0.3638961, 0.3517193, 0.451545, 0.2218704, 0.3966671, 0.3657961, 0.1743973, 0.4999756, 0.3858945, 0.03750942, 0.7201028, 0.2915803, 0.294468, 0.3663494, 0.4673743, 0.1296314, 0.3640437, 0.1727262, 0.4488995, 0.3807879, 0.3251386, 0.3158567, 0.1006992, 0.6159997, 0.4606855, 0.1440604, 0.02916335, 0.4347737, 0.2414784, 0.001135522, 0.004758894, 0.2577152, 0.1608965, 0.2724634, 0.4031675, 0.4109179, 0.344276, 0.6943709, 0.484852, 0.4377516, 0.06145318, 0.1577395, 0.2940371, 0.414151, 0.5505183, 0.3021704, 0.4884471, 0.2713707, 0.2018527, 0.4472059, 0.4787246, 0.4296411, 0.2701482, 0.1878728, 0.5884987, 0.4892075, 0.02605321, 0.478438, 0.2787175, 0.2855897, 0.0192624, 0.2650513, 0.1205714, 0.372572, 0.3421291, 0.1827548, 0.4499269, 0.2522416, 0.5370537, 0.2410394, 0.1655011, 0.3423404, 0.3609183, 0.3638107, 0.2383725, 0.2983375, 0.0848128, 0.2667344, 0.340767, 0.4775433, 0.3378197, 0.4134657, 0.5099819, 0.3858898, 0.4824315, 0.5040161, 0.06058956, 0.2798007, 0.06880196, 0.332884, 0.5604148, 0.3085592, 0.03722706, 0.2479944, 0.2170399, 0.2068155, 0.3467859, 0.07079298, 0.4218612, 0.1924966, 0.47921, 0.5743247, 0.2153983, 0.3981593, 0.548361, 0.2933664, 0.4317751, 0.5212985, 0.1428793, 0.3119983, 0.169271, 0.2840233, 0.03217501, 0.09722211, 0.4648224, 0.02077484, 0.3178806, 0.1606526, 0.4965398, 0.3486408, 0.0986238, 0.3924168, 0.1936601, 0.09163902, 0.3550045, 0.5061588, 0.1306761, 0.2029511, 0.6008922, 0.3092325, 0.4361976, 0.4233713, 0.5425343, 0.4779644, 0.275601, 0.2442452, 0.3846627, 0.3268958, 0.4501851, 0.4916802, 0.4749513, 0.1725536, 0.1916248, 0.5952163, 0.3748132, 0.1948774, 0.3336527, 0.3010293, 0.4553111, 0.5135396, 0.06918293, 0.4496259, 0.390492, 0.1763634, 0.5433237, 0.2203524, 0.3931913, 0.6639197, 0.3123272, 0.4926588, 0.4318279, 0.5230912, 0.5419245, 0.1666192, 0.2665655, 0.1100669, 0.4657935, 0.2498395, 0.1808801, 0.4580607, 0.187565, 0.2652766, 0.5226231, 0.30038, 0.2174185, 0.5039846, 0.2882748, 0.2921755, 0.2812907, 0.04093704, 0.4840029, 0.4145595, 0.6217413, 0.2745743, 0.2906943, 0.3410254, 0.03566154, 0.04119231, 0.392704, 0.269262, 0.3323525, 0.2846023, 0.2562961, 0.5487254, 0.2091341, 0.5239177, 0.483368, 0.5330357, 0.359073, 0.4855809, 0.3881712, 0.330114, 0.4791376, 0.7042807, 0.06261565, 0.5226003, 0.5080116, 0.1387095, 0.4587785, 0.1284614, 0.4814612, 0.06377343, 0.5944231, 0.1904309, 0.498642, 0.419437, 0.337491, 0.5150426, 0.4451441, 0.3838868, 0.7486657, 0.06307617, 0.4256729, 0.3154017, 0.3957711, 0.3216888, 0.1367116, 0.6301038, 0.189664, 0.3930423, 0.253558, 0.4699591, 0.4806684, 0.4919163, 0.5118394, 0.4926073, 0.3707832, 0.4707233, 0.4178893, 0.2992536, 0.1323772, 0.6106819, 0.6928388, 0.3917197, 0.5334995, 0.5720362, 0.4240219, 0.3214293, 0.3846525, 0.05991267, 0.3102905, 0.03584972, 0.3747015, 0.5223669, 0.4984603, 0.2539708, 0.1896356, 0.5739486, 0.3156076, 0.1305674, 0.05207146, 0.1293325, 0.008371552, 0.01161, 0.5256169, 0.3268618, 0.2067585, 0.155395, 0.7117197, 0.482132, 0.4923288, 0.2669521, 0.1901612, 0.4087996, 0.2918169, 0.1526852, 0.229591, 0.4153849, 0.4064446, 0.4074455, 0.5984116, 0.3997829, 0.5314477, 0.5335116, 0.4452124, 0.1715974, 0.04064274, 0.4047489, 0.503481, 0.1679796, 0.1937686, 0.2504683, 0.481176, 0.5035805, 0.1636957, 0.2678801, 0.5510975, 0.4799567, 0.1133916, 0.543887, 0.5107605, 0.1972239, 0.08961499, 0.1998242, 0.4127923, 0.6868074, 0.2701942, 0.500727, 0.1163687, 0.3664995, 0.5124672, 0.1172056, 0.5520273, 0.04745111, 0.3513556, 0.4377516, 0.3464608, 0.2994958, 0.4048545, 0.4955045, 0.2351797, 0.453626, 0.462964, 0.5216946, 0.4194528, 0.4333132, 0.4444945, 0.1599021, 0.4722613, 0.4035717, 0.4090805, 0.3636128, 0.4122661, 0.374409, 0.5634113, 0.4744483, 0.1772123, 0.4784628, 0.6311211, 0.1956082, 0.5395536, 0.5454575, 0.2825063, 0.371925, 0.3925175, 0.3797819, 0.3948894, 0.2502065, 0.4844006, 0.389655, 0.5231288, 0.519948, 0.4549256, 0.5616221, 0.3598421, 0.3921629, 0.420965, 0.1136407, 0.3955303, 0.4791828, 0.006721163, 0.167238, 0.1330227, 0.4150797, 0.3441873, 0.4275515, 0.4470147, 0.5111393, 0.4175831, 0.505528, 0.4593427, 0.3670325, 0.4638386, 0.4617355, 0.5017871, 0.4812044, 0.5577496, 0.1183296, 0.2086324, 0.2945096, 0.7513041, 0.2070203, 0.1843165, 0.3554795, 0.08630079, 0.007633469, 0.400687, 0.1556942, 0.5784594, 0.1490675, 0.5582389, 0.006604005, 0.5386135, 0.4473764, 0.1616502, 0.494692, 0.3702608, 0.4453638, 0.07250659, 0.5500408, 0.0164342, 0.1678115, 0.5097415, 0.734973, 0.462096, 0.5586842, 0.265026, 0.2759468, 0.5287397, 0.5020451, 0.4932949, 0.228952, 0.4073752, 0.5860539, 0.2609332, 0.09271802, 0.3018563, 0.07296664, 0.2979839, 0.2333095, 0.1506785, 0.1095999, 0.7945724, 0.4525791, 0.3704711, 0.4393881, 0.6006672, 0.6039588, 0.4813028, 0.5016542, 0.006153914, 0.1116796, 0.3008036, 0.3699481, 0.1492698, 0.3159477, 0.4062469, 0.5835768, 0.2484585, 0.5478721, 0.4342394, 0.502038, 0.4012958, 0.7388857, 0.2542176, 0.4007375, 0.19549, 0.05650394, 0.2763224, 0.4400817, 0.5596016, 0.6227507, 0.4915692, 0.4279867, 0.4283529, 0.003616923, 0.2958933, 0.6385638, 0.3569034, 0.4971855, 0.4320557, 0.1643153, 0.04426983, 0.409163, 0.5627326, 0.4393791, 0.4664663, 0.6091014, 0.3704775, 0.236019, 0.3134208, 0.2007194, 0.4765702, 0.271212, 0.4547846, 0.5472079, 0.2065047, 0.4447785, 0.1950259, 0.3587815, 0.2551794, 0.0037057, 0.3342511, 0.1692787, 0.4761163, 0.1097709, 0.3883978, 0.3811609, 0.4825783, 0.3457507, 0.09409782, 0.4703521, 0.2880294, 0.207586, 0.178434, 0.09646604, 0.3264134, 0.6671906, 0.30606, 0.0839894, 0.5245724, 0.4344697, 0.4360471, 0.5593575, 0.07815168, 0.4839333, 0.2661485, 0.4120425, 0.4381142, 0.4530482, 0.4403311, 0.5639343, 0.5340149, 0.2174218, 0.1442684, 0.0004938841, 0.01246173, 4.387156e-05, 0.01924386, 0.002309603, 0.0291411, 1.523578e-05, 7.077482e-07, 0.006296815, 0.002507707, 0.01445895, 0.001225489, 0.1983246, 0.0004452421, 0.00702088, 9.390854e-05, 0.07175554, 0.0548537, 0.479185, 0.4198954, 0.3116239, 0.2709593, 0.08914358, 0.3471833, 0.4037272, 0.1890464, 0.2137121, 0.3864623, 0.03196237, 0.4552984, 0.2628741, 0.5163917, 0.1852415, 0.2652014, 0.3175303, 0.2757072, 0.1344363, 0.08078972, 0.5589065, 0.09456142, 0.3084143, 0.13679, 0.5662627, 0.3846163, 0.3079392, 0.3103946, 0.1812589, 0.183875, 0.1854392, 0.3949514, 0.3735843, 0.4927622, 0.3758317, 0.3864233, 0.4321294, 0.356381, 0.3625483, 0.1682407, 0.4274949, 0.2037362, 0.4521602, 0.2209914, 0.6371216, 0.3135791, 0.4741137, 0.5330159, 0.5374253, 0.5001474, 0.2308092, 0.06251845, 0.4841686, 0.1239906, 0.501827, 0.4517928, 0.3470885, 0.3483525, 0.1292174, 0.04701447, 0.5903102, 0.2779209, 0.5763401, 0.06431553, 0.2561725, 0.5040173, 0.3281762, 0.491602, 0.3649683, 0.05969856, 0.002284523, 0.02248951, 0.2368591, 0.0328968, 0.4227606, 0.2182527, 0.4804803, 0.01093309, 9.37324e-05, 0.1930963, 0.3603903, 0.02057705, 0.1286859, 0.2529126, 0.438882, 0.5368357, 0.4906784, 0.3229668, 0.193274, 0.3483005, 0.6449756, 0.0101702, 0.01106646, 0.03862019, 0.1098205, 0.04932293, 0.1877296, 0.379555, 0.03439666, 0.008807907, 0.001014112, 0.02205718, 0.01823241, 0.0002604162, 0.0009687896, 0.0003081825, 0.02472751, 0.6662254, 0.01301603, 0.3602987, 0.4608434, 0.4789475, 0.2971848, 0.3516658, 0.5724885, 0.03854323, 0.3339965, 0.21062, 0.002038895, 0.4356205, 0.6990201, 0.4013237, 0.3538021, 0.3338563, 0.4177214, 0.7152883, 0.1600098, 0.26793, 0.1541453, 0.7249621, 0.1926355, 0.4533357, 0.02075461, 0.01334938, 0.7310745, 0.2807415, 0.05887315, 0.01153597, 0.3335336, 0.002659345, 0.5110052, 0.5153526, 0.2883297, 0.4987824, 0.3203894, 0.04558724, 0.1607414, 0.004904106, 0.05177897, 0.01248053, 0.01714466, 0.4399894, 0.4275431, 0.02064505, 0.06911563, 0.500928, 0.2292808, 0.1164667, 0.2793541, 0.3948023, 0.4094744, 0.4920115, 0.1202988, 0.3886385, 0.5286318, 0.2073528, 0.4883399, 0.5259711, 0.02964463, 0.5155314, 0.5206496, 0.47512, 0.4838424, 0.3227768, 0.225331, 0.1828446, 0.4390775, 0.5026674, 0.448252, 0.1445772, 0.5722141, 0.3028423, 0.4254083, 0.2235992, 0.3463253, 0.01227747, 0.2783226, 0.3024111, 0.3592803, 0.05520967, 0.1506806, 0.2641404, 0.7092285, 0.4409499, 0.4806756, 0.09884218, 0.314041, 0.3410404, 0.3688618, 0.4937235, 0.1968536, 0.5613799, 0.1144479, 0.3369183, 0.3047792, 0.530395, 0.4504078, 0.4983866, 0.4536563, 0.6773262, 0.5187509, 0.4608742, 0.2120824, 0.08977514, 0.4782281, 0.08646618, 0.3645477, 0.5152662, 0.3938988, 0.1984576, 0.3996218, 0.5422127, 0.5753703, 0.4241664, 0.371854, 0.6112494, 0.4717957, 0.4594211, 0.3104212, 0.03399282, 0.3201319, 0.1029055, 0.01732764, 7.849042e-05, 0.01484638, 0.2747829, 0.179099, 0.3415569, 0.3471311, 0.1315057, 0.2838305, 0.12495, 0.3655334, 0.1481009, 0.1061546, 0.1818283, 0.06062158, 0.134118, 0.3194623, 0.2178092, 0.1504859, 0.001920692, 0.05387684, 0.5011179, 0.6623565, 0.03236487, 0.5088757, 0.5750849, 0.3935493, 0.0791745, 0.4098359, 0.255817, 0.5321467, 0.5634549, 0.3988124, 0.4434308, 0.3330729, 0.120566, 0.01347846, 0.5231228, 0.09371727, 6.944185e-05, 0.3088197, 0.3995146, 0.2177848, 0.2576072, 0.3720155, 0.05787493, 0.05150951, 0.5438961, 0.02964861, 0.003566406, 0.01798408, 0.00901698, 0.4769279, 0.2711197, 0.4860972, 0.3514164, 0.5457361, 0.5583369, 0.7311377, 0.2482, 0.4428935, 0.02595361, 0.5960836, 0.3736493, 0.531478, 0.1896308, 0.2186147, 0.347512, 0.6263555, 0.4178224, 0.3499157, 0.2073416, 0.2657577, 0.3518286, 0.1765472, 0.3513773, 0.2571209, 0.4456954, 0.1164271, 0.5343613, 0.2993408, 0.3484964, 0.1439217, 0.1511796, 0.5777029, 0.2653197, 0.2738233, 0.009408854, 0.2416881, 0.3838784, 0.1143847, 0.2979535, 0.5665359, 0.5342295, 0.5179048, 0.1776616, 0.2169004, 0.1546547, 0.7764488, 0.1602791, 0.04177891, 0.004352829, 0.07248461, 0.379448, 0.02534332, 0.2970614, 0.04739908, 0.4976455, 0.09638431, 0.3266096, 0.6689487, 0.3076962, 0.7375178, 0.6288841, 0.1416729, 0.04815919, 0.1367413, 0.1778365, 0.002321005, 0.02670701, 0.003775854, 0.000994774, 0.05489292, 0.01638794, 0.02446162, 0.003580444, 0.1904616, 0.002390723, 0.3742828, 0.001298983, 0.4406016, 0.0004508156, 0.1395763, 0.2973721, 0.475826, 0.464551, 0.3579778, 0.3771427, 0.4474156, 0.4479593, 0.254652, 0.3570847, 0.1590612, 0.4191336, 0.3072135, 0.3704122, 0.2493964, 0.4940404, 0.455657, 0.2405654, 0.3060601, 0.4909306, 0.4845515, 0.3654149, 0.3621235, 0.4898716, 0.4481118, 0.5345002, 0.5475698, 0.1096214, 0.4939472, 0.2368811, 0.2663867, 0.2420934, 0.1203103, 0.3173541, 0.4080299, 0.4482204, 0.34899, 0.3766757, 0.6752804, 0.1775358, 0.2212757, 0.1805369, 0.2116934, 0.5058878, 0.547384, 0.456265, 0.3865216, 0.3631482, 0.3097707, 0.306677, 0.3586549, 0.5436474, 0.5614779, 0.3980042, 0.132836, 0.7145735, 0.5264724, 0.3487811, 0.432562, 0.3828411, 0.3868092, 0.4878718, 0.2877993, 0.2241956, 0.005190184, 0.3867421, 0.1570132, 0.4877716, 0.3400209, 0.3419903, 0.48053, 0.5569451, 0.1653153, 0.3209011, 0.05998003, 0.5362566, 0.05060434, 0.2112388, 0.1458356, 0.01433509, 0.05206395, 0.2291574, 0.1544923, 0.5406408, 0.3304576, 0.5405982, 0.5514083, 0.4959129, 0.3982912, 0.09833469, 0.3777351, 0.398233, 0.5155177, 0.38011, 0.2739465, 0.3150642, 0.1431615, 0.4936331, 0.4572208, 0.1259649, 0.1641178, 0.4834091, 0.4503073, 0.5785252, 0.2466328, 0.2214378, 0.4118097, 0.5628273, 0.414018, 0.5537788, 0.3318671, 0.3577562, 0.3891264, 0.5644753, 0.1262717, 0.4488792, 0.4152621, 0.484446, 0.2492193, 0.3852266, 0.3927326, 0.5484753, 0.3040368, 0.1954921, 0.08496237, 0.6570747, 0.4203523, 0.3392887, 0.3468766, 0.3195976, 0.3385936, 0.4611278, 0.5516769, 0.07771941, 0.3476526, 0.496968, 0.300373, 0.05032264, 0.1577807, 0.1536286, 0.1058243, 0.3787941, 0.006898048, 0.03909733, 0.001031554, 0.1137407, 0.5638867, 0.4143685, 0.1893684, 0.2525203, 0.2787742, 0.2924809, 0.1782, 0.4471451, 0.2739803, 0.7663917, 0.1070139, 0.03170298, 0.0698381, 0.5933314, 0.2565496, 0.2218148, 0.5221401, 0.1086552, 0.1088309, 0.1322011, 0.03764487, 0.1852564, 0.3815136, 0.03492554, 0.7459549, 0.3445737, 0.383642, 0.2205904, 0.453433, 0.474746, 0.7743905, 0.5300972, 0.4944995, 0.1814, 0.2982688, 0.707785, 0.6055451, 0.1132745, 0.4769655, 0.7671377, 0.2241, 0.4315048, 0.2435148, 0.3810033, 0.5069504, 0.4964414, 0.2044559, 0.3061113, 0.302172, 0.4302927, 0.3958469, 0.3913044, 0.1627614, 0.513683, 0.4789626, 0.3170458, 0.3729308, 0.357343, 0.4656677, 0.4855044, 0.3062488, 0.605821, 0.5574976, 0.05994771, 0.4336695, 0.7323283, 0.4797617, 0.5123973, 0.2974357, 0.3606414, 0.4101324, 0.5435118, 0.054698, 0.4174077, 0.4414601, 0.3725182, 0.1774587, 0.5598904, 0.4259339, 0.1096559, 0.470828, 0.4360365, 0.2743681, 0.3724644, 0.5081269, 0.5090837, 0.09619092, 0.5632102, 0.4659594, 0.4900814, 0.4531589, 0.02454143, 0.5300175, 0.4090582, 0.4707005, 0.4057293, 0.1655375, 0.4434863, 0.5677695, 0.3921975, 0.5032368, 0.2327187, 0.6399966, 0.05976735, 0.08041113, 0.364722, 0.3411555, 0.3264452, 0.01285425, 0.445259, 0.2998191, 0.520933, 0.02080808, 0.1208694, 0.3750799, 0.1127377, 0.4084133, 0.1751137, 0.007834788, 0.6987428, 0.5143971, 0.3788771, 0.1863353, 0.4691868, 0.4318212, 0.08898289, 0.4235849, 0.368326, 0.4044788, 0.5012247, 0.4135079, 0.2705883, 0.4621952, 0.2718277, 0.4584396, 0.7126542, 0.1591483, 0.04743063, 0.1252491, 0.2380307, 0.3641238, 0.2323076, 0.4755952, 0.4068174, 0.2512, 0.4401742, 0.2053081, 0.3785541, 0.3786987, 0.4228598, 0.6373656, 0.125171, 0.2845412, 0.1680238, 0.4455625, 0.1359686, 0.1517787, 0.2952043, 0.3378821, 0.4895732, 0.185048, 0.4787706, 0.3453081, 0.2858224, 0.4966944, 0.4450024, 0.1845588, 0.4848825, 0.4524649, 0.009700002, 0.4574103, 0.4835112, 0.4429505, 0.4371534, 0.5136862, 0.3708447, 0.4767961, 0.6596254, 0.4749662, 0.4443855, 0.006766999, 0.3270632, 0.414687, 0.5410234, 0.4741102, 0.3675732, 0.4538674, 0.5118541, 0.3904346, 0.7213241, 0.3160143, 0.3016514, 0.2836705, 0.2909713, 0.1506885, 0.4073716, 0.5838639, 0.3196828, 0.4969966, 0.4617899, 0.6865968, 0.4071386, 0.4479085, 0.4175742, 0.4949604, 0.4422126, 0.4461606, 0.4731892, 0.2089823, 0.06915727, 0.4481152, 0.3903692, 0.1051583, 0.4521864, 0.3558629, 0.2191167, 0.2168575, 0.4048884, 0.2643408, 0.3295232, 0.002809184, 0.3693151, 0.4894633, 0.2121002, 0.5590354, 0.5097978, 0.07521519, 0.6862931, 0.2087926, 0.4651401, 0.3744262, 0.2579511, 0.04473472, 0.08161962, 0.4234544, 0.4754148, 0.2196046, 0.1515695, 0.3685158, 0.4326077, 0.645358, 0.0548359, 0.3618048, 0.3513159, 0.5087109, 0.7252757, 0.3544897, 0.3589362, 0.4433722, 0.06850859, 0.4486858, 0.06305093, 0.04380032, 0.00159563, 0.1370971, 0.3319642, 0.2555234, 0.2911309, 0.3372621, 0.4365579, 0.1580074, 0.3645597, 0.2717682, 0.396138, 0.4514781, 0.2867877, 0.02611766, 0.3303866, 0.03475666, 0.2116104, 0.04351485, 0.1428576, 0.4978621, 0.3131729, 0.5393708, 0.094293, 0.4490461, 0.02135034, 0.0001910185, 0.5340226, 0.07366574, 0.1602026, 0.0606891, 0.3926369, 0.07519229, 0.01995943, 0.04435024, 0.2262182, 0.09193922, 0.07062426, 0.08660148, 0.5022489, 0.1065248, 0.3547289, 0.509452, 0.4283909, 0.3867043, 0.5990455, 0.07172006, 0.1102929, 0.2520512, 0.5167255, 0.08080622, 0.5821595, 0.06535145, 0.4755474, 0.4288533, 0.5376915, 0.2719567, 0.2882076, 0.5026506, 0.3337122, 0.7230914, 0.008535378, 0.2131696, 0.5075351, 0.4074117, 0.1615617, 0.171333, 0.5063084, 0.2130039, 0.4124246, 0.08502542, 0.5202494, 0.506774, 0.2591177, 0.5344909, 0.4567012, 0.06907575, 0.247016, 0.4203054, 0.003975809, 0.11037, 0.3061331, 0.05189501, 0.002068511, 0.03002642, 0.3505336, 0.004435378, 0.005708992, 0.2020328, 0.3080716, 0.007617755, 0.01776536, 0.1475578, 0.07734806, 0.4680254, 0.08059435, 0.3769923, 0.5001511, 0.1290647, 0.3428521, 0.3190767, 0.2868447, 0.156979, 0.1211656, 0.2405933, 0.1692929, 0.0002123679, 0.2943281, 0.736635, 0.4064675, 0.3889617, 0.3425764, 0.4432671, 0.01679193, 0.4692099, 0.1373959, 0.3009047, 0.4897646, 0.4987875, 0.4748309, 0.3840183, 0.1949143, 0.4559032, 0.414408, 0.4401892, 0.0895561, 0.3609587, 0.4936505, 0.3254077, 0.05922821, 0.4854331, 0.5949762, 0.5022431, 0.3150085, 0.2511529, 0.08754798, 0.01657651, 0.2666015, 0.3958508, 0.03059966, 0.3316612, 0.006381767, 0.1645508, 0.464018, 0.4013076, 0.06090574, 0.360332, 0.5698267, 0.2942293, 0.4485123, 0.06505492, 0.4668634, 0.5410469, 0.338378, 0.2223562, 0.5703511, 0.02701779, 0.3736682, 0.7709545, 0.5162936, 0.5452701, 0.3655731, 0.514677, 0.378244, 0.587969, 0.2405329, 0.4561725, 0.4942816, 0.2733441, 0.3871441, 0.4316686, 0.3343124, 0.3273744, 0.2775366, 0.2816322, 0.09174177, 0.1598384, 0.7285891, 0.01069756, 0.001832376, 0.402601, 0.2775997, 0.4609114, 0.4799643, 0.346544, 0.4287765, 0.4013004, 0.3375344, 0.5047562, 0.4814121, 0.3927022, 0.3870529, 0.03158379, 0.3787545, 0.4745791, 0.4769241, 0.1667633, 0.4759575, 0.7670844, 0.3843161, 0.4387263, 0.5031115, 0.5457613, 0.4803809, 0.6008685, 0.5026961, 0.6329045, 0.128313, 0.4749092, 0.4730552, 0.6556951, 0.1058048, 0.2434816]       
        
        # Obtain average for all p-values.
        p_val_cl_avrg = round(np.average(p_vals_cl), 2)
        p_val_f_avrg = round(np.average(p_vals_f), 2)
        
        # Obtain final p_value for the *distributions* of p_values obtained
        # above.
        m_cl = robjects.FloatVector(p_vals_cl)
        m_f = robjects.FloatVector(p_vals_f)
        res_cl_f = kde_test(x1=m_cl, x2=m_f)
        p_val_cl_f = res_cl_f.rx2('pvalue')
        
#        kol_smir_d_p = ks_2samp(p_vals_cl, p_vals_f)
#        kol_smir_d, kol_smir_p = kol_smir_d_p[0], kol_smir_d_p[1]
#        print '  K-S statistic', kol_smir_d
#        print '  K-S p-value', kol_smir_p
        
        p_value = round(float(str(p_val_cl_f)[4:]), 2)

    # Skipping decontamination algorithm
    else:
        p_value, p_vals_cl, p_vals_f, kde_cl_norm, kde_f_norm, p_val_cl_avrg,\
        p_val_f_avrg = -1., [], [], [], [], -1., -1.
        

    # For plotting purposes only.        
        
    # Obtain the 1D KDE for the cluster region (stars inside cluster's
    # radius) vs field regions.
    xmin, xmax = min(p_vals_cl)-0.1, max(p_vals_cl)+0.1
    x_kde_cl = np.mgrid[xmin:xmax:100j]
    kernel_cl = stats.gaussian_kde(p_vals_cl)
    # 1-D KDE for cluster vs field region p_values.
    kde_cl_1d = np.reshape(kernel_cl(x_kde_cl).T, x_kde_cl.shape)

    # Obtain the 1D KDE for the field regions vs field regions.
    xmin, xmax = min(p_vals_f)-0.1, max(p_vals_f)+0.1
    x_kde_f = np.mgrid[xmin:xmax:100j]
    kernel_f = stats.gaussian_kde(p_vals_f)
    # 1-D KDE for field vs field region p_values.
    kde_f_1d = np.reshape(kernel_f(x_kde_f).T, x_kde_f.shape)
 
    return p_value, p_vals_cl, p_vals_f, kde_cl_1d, kde_f_1d, x_kde_cl, x_kde_f,\
    p_val_cl_avrg, p_val_f_avrg
